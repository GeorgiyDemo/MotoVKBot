#TODO –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

import vk_api
import yaml
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id

import requests


message_dict = {
    1 : "\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –Ø—à–∫–∞. –Ø —á–∞—Ç-–±–æ—Ç, –∏ —É –º–µ–Ω—è –µ—Å—Ç—å –∫–ª—é—á–∏ –æ—Ç –ú–æ—Ç–æ—Å–∞—Ä–∞—è. –∑–¥–µ—Å—å –ø—Ä–æ–¥–∞—é—Ç—Å—è –∑/—á –¥–ª—è –∫–∞—Å—Ç–æ–º –±–∞–π–∫–æ–≤.\n\n–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?\n–û—Ç–≤–µ—á–∞—è –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –±–æ–Ω—É—Å—ã.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç \"–¢—Ä—É—à–Ω–æ–≥–æ –±–æ–±–±–µ—Ä–∞\" –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–∞–∂–º–∏ –Ω–∞ \"–ú–∞–≥–∞–∑–∏–Ω\".\n\n__________\n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —É —Ç–µ–±—è –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏, —Å–¥–µ–ª–∞–π –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
}
def get_settings():
    """–ß—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å yaml"""
    with open("./yaml/settings.yml", 'r') as stream:
        return yaml.safe_load(stream)

def get_username(vk, user_id):
    """–ú–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id"""

    name = vk.method('users.get', {'user_id': user_id})[0]["first_name"]
    return name

class MainClass():
    def __init__(self):

        self.settings = get_settings()
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
        self.vk = vk_api.VkApi(token=self.settings["token"])

        self.processing()

    def get_url(self, message_id):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è url –∏–∑–æ–±—Ä–∂–µ–Ω–∏—è –∏–∑ id —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω—å–∫—É –ø–æ –º–µ—Ç–æ–¥—É
        r = self.vk.method('messages.getById', {'message_ids': message_id, "group_id" : self.settings["group_id"]})["items"]
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ
        all_sizes = r[0]["attachments"][0]["photo"]["sizes"]

        # –í —Ü–∏–∫–ª–µ –ø–æ –∫–∞–∂–¥–æ–π –∏—â–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        height, width, index = 0, 0, 0
        for i in range(len(all_sizes)):
            if all_sizes[i]["width"] > width and all_sizes[i]["height"] > height:
                height = all_sizes[i]["height"]
                width = all_sizes[i]["width"]
                index = i

        # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
        url = all_sizes[index]["url"]

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ (—Ç.–∫. –æ–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π)
        return url

    def processing(self):
        """
        –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        # –†–∞–±–æ—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        longpoll = VkLongPoll(self.vk)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        for event in longpoll.listen():

            # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if event.type == VkEventType.MESSAGE_NEW:

                # –ï—Å–ª–∏ –æ–Ω–æ –∏–º–µ–µ—Ç –º–µ—Ç–∫—É –¥–ª—è –±–æ—Ç–∞
                if event.to_me:

                    # –®–∞–≥ 1
                    if event.text == "–ù–∞—á–∞—Ç—å":
                        
                        message_str = "–ü—Ä–∏–≤–µ—Ç, "+get_username(self.vk, event.user_id)+message_dict[1]
                        self.vk.method('messages.send', {'user_id': event.user_id, 'random_id': get_random_id(), 'message': message_str })

                    #–®–∞–≥ 3
                    elif event.text == "–ß–µ–∫-–ª–∏—Å—Ç \"–¢—Ä—É—à–Ω–æ–≥–æ –±–æ–±–±–µ—Ä–∞\"":
                        print(event)
                        message_str = "–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ üß©"
                        self.vk.method('messages.send', {'user_id': event.user_id, 'random_id': get_random_id(), 'message': message_str })

if __name__ == "__main__":
    MainClass()
